This problem is merely a path finding exercise. One must find the shortest path from 'T' to 'E'. You could use the standard BFS 
(Breadth First Search) algorithm for accomplishing this task:

  1. Start at 'T'. (push it into your BFS queue and set the distance at 'T' to 0)
  2. Pop the next state S from your queue, and mark it visited (your state is: (x-position, y-position))
  3. Push all of the neighbor states of S that are valid (i.e. not a wall) and haven't been visited into your BFS queue. 
    (Make sure to update your distance matrix when pushing in the new states.)
  4. Repeat steps 2) and 3) until your BFS queue is empty.
  5. Read the number in this distance matrix at the point 'E' for your answer
However, we must also make sure that we recharge after taking at most K steps. One way to ensure that this happens is to keep track of the 
number of remaining moves that T-800 can take. So now, our definition of a 'state' includes both our position on the grid and the number
of steps left. So, we now have to modify our BFS algorithm a bit to account for this new state:

  1.Start at 'T' (push it into your BFS queue, set the distance at 'T' to 0 and set number of moves left to K)
  2.Pop the next state S from your queue, and mark it visited (the state is now: (x-position, y-position, # of moves remaining))
  3.Push all of the neighbor states of S that are valid (i.e. number of moves remaining â‰¥ 0, and not a wall) and haven't been visited into 
    your BFS queue. (Make sure to update your distance matrix when pushing in the new states, and to subtract 1 from the number of moves 
    remaining. Also, if the pushed neighbor is a 'R', make sure to reset the number of moves remaining to K.)
  4.Repeat steps 2) and 3) until your BFS queue is empty.
  5.Read the number in this distance matrix at the point 'E' for your answer
