This is an implementation problem. Everyone knows what symmetry means. It's just a matter of being able to implement it concisely and 
correctly in code. One of the less stressful ways to handle this is by hardcoding the symmetry of the characters beforehand into 2D 
arrays in a manner resembling adjacency matrices. Since characters can be equivalent interpreted as their ASCII in C++, 
we just use the characters as array indices. It's as simple as following the symmetry specifications in the problem statement. 
After we've read in the grid, we just loop to array locations and check whether their horizontally, vertically, and diagonally 
reflected positions are symmetrical.

Assuming 1-based indices, let's consider the coordinate (r, c). For reflecting across the horizontal line, the row r 
transforms to N − r + 1 while the column stays the same. For instance if N = 5 the reflection of (1, 1) would be (5−1+1, 1) = (5, 1). 
This works backwards too: (5, 1) becomes (5−5+1, 1) = (1, 1) with the same formula. Likewise, for reflecting across the vertical line,
the row stays the same while the column c gets transformed to N − c + 1.

Reflecting across the diagonal line from top-left to bottom-right is as easy as flipping their x- and y- coordinates. 
(2, 3) becomes (3, 2), (5, 1) becomes (1, 5), and so forth. Doing a check for points reflected across the top-right to bottom-left 
line can be done in the same way, except we check the two coordinates after each has been horizontally and vertically reflected.

It may be tempting to try to eliminate redundant checks (e.g. only looking at the left half of the matrix when verifying 
symmetry about the vertical). But since the formulas work both ways, it is best to follow the KISS principle and just check 
every coordinate. Doing otherwise (such as looping from 1 to N/2) may lead to missed checks like self-symmetry along the 
vertical and horizontal line itself for when N is odd. Since there are N×N cells, our algorithm is O(N2). 
Small constant-time optimizations like this is not going to be the difference between pass and fail when N is no greater than 1000.

Official Solution (C++)

#include <iostream>
using namespace std;

int N, vsym = 1, hsym = 1, tlbr = 1, trbl = 1, ans = 0;
char G[1005][1005];
bool hs[127][127], vs[127][127]; //horizontally/vertically symmetrical
bool lr[127][127], rl[127][127]; //diagonally symmetrical

int main() {
  vs['.']['.'] = hs['.']['.'] = lr['.']['.'] = rl['.']['.'] = 1;
  vs['O']['O'] = hs['O']['O'] = lr['O']['O'] = rl['O']['O'] = 1;
  hs['(']['('] = hs[')'][')'] = vs['('][')'] = vs[')']['('] = 1;
  vs['\\']['/'] = vs['/']['\\'] = hs['\\']['/'] = hs['/']['\\'] = 1;
  lr['/']['/'] = rl['/']['/'] = lr['\\']['\\'] = rl['\\']['\\'] = 1;
  cin >> N;
  for (int r = 1; r <= N; r++) cin >> G[r] + 1;
  for (int r = 1; r <= N; r++) {
    for (int c = 1; c <= N; c++) {
      if (!hs[G[r][c]][G[N-r+1][c]]) hsym = 0;
      if (!vs[G[r][c]][G[r][N-c+1]]) vsym = 0;
    }
    for (int c = 1; c <= N; c++) {
      if (!lr[G[r][c]][G[c][r]]) tlbr = 0;
      if (!rl[G[N-r+1][N-c+1]][G[N-c+1][N-r+1]]) trbl = 0;
    }
  }
  cout << hsym + vsym + tlbr + trbl << endl;
  return 0;
}
